{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MC9WlRVABd_w","executionInfo":{"status":"ok","timestamp":1715270465018,"user_tz":-360,"elapsed":2442,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"de12f0c2-b3d7-4f4a-8495-cbcea00d498a"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":1}],"source":["import nltk\n","nltk.download('stopwords')"]},{"cell_type":"code","source":["!pip install np_utils"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lxmPaSTqCxuQ","executionInfo":{"status":"ok","timestamp":1715270479311,"user_tz":-360,"elapsed":10462,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"a40ccb5a-4d05-4de2-b503-6bea6aaf3bc1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting np_utils\n","  Downloading np_utils-0.6.0.tar.gz (61 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/62.0 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.0/62.0 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: numpy>=1.0 in /usr/local/lib/python3.10/dist-packages (from np_utils) (1.25.2)\n","Building wheels for collected packages: np_utils\n","  Building wheel for np_utils (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for np_utils: filename=np_utils-0.6.0-py3-none-any.whl size=56441 sha256=a897d8bba01ef25db26d4d543e7daac97808e9d3c4dccb328a728969fa9c53c3\n","  Stored in directory: /root/.cache/pip/wheels/b6/c7/50/2307607f44366dd021209f660045f8d51cb976514d30be7cc7\n","Successfully built np_utils\n","Installing collected packages: np_utils\n","Successfully installed np_utils-0.6.0\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from plotly.offline import iplot\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\n","from sklearn.model_selection import train_test_split\n","# from keras.utils.np_utils import to_categorical\n","\n","from keras.utils import to_categorical\n","\n","labels = np.array([1, 2, 3, 4])\n","# Assuming your labels are stored in a variable called 'labels'\n","# Convert labels to categorical format\n","categorical_labels = to_categorical(labels)\n","\n","\n","from tensorflow.keras.callbacks import EarlyStopping\n","from tensorflow.keras.layers import Dropout\n","import re\n","from nltk.corpus import stopwords\n","from nltk import word_tokenize\n","STOPWORDS = set(stopwords.words('english'))"],"metadata":{"id":"99B3VyFKCrIR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv('/content/train_all_tasks.csv')\n","\n","# Please make to run this file on google collab. once Opened the file go to \"Files\" on the left, select \"Upload to Session Storage\"\n","# Then upload the \"train_all_tasks.csv\" file. Finally select \"Copy Path\" and then paste it. Now you're all set!!"],"metadata":{"id":"S6Ryt48aCp_b","executionInfo":{"status":"ok","timestamp":1715274013633,"user_tz":-360,"elapsed":597,"user":{"displayName":"KAMRAN HASSAN SHOMRAT","userId":"14582049706465914688"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"7bpbdXo_EhhL","executionInfo":{"status":"ok","timestamp":1715270502786,"user_tz":-360,"elapsed":873,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"48bff88b-7af5-4363-9d70-a69928de175d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  rewire_id  \\\n","0   sexism2022_english-7358   \n","1   sexism2022_english-2367   \n","2   sexism2022_english-3073   \n","3  sexism2022_english-14895   \n","4   sexism2022_english-4118   \n","\n","                                                text label_sexist  \\\n","0              Damn, this writing was pretty chaotic   not sexist   \n","1  Yeah, and apparently a bunch of misogynistic v...   not sexist   \n","2       How the FUCK is this woman still an MP!!!???   not sexist   \n","3  Understand. Know you're right. At same time I ...   not sexist   \n","4     Surprized they didn't stop and rape some women   not sexist   \n","\n","  label_category label_vector  \n","0           none         none  \n","1           none         none  \n","2           none         none  \n","3           none         none  \n","4           none         none  "],"text/html":["\n","  <div id=\"df-4d760d7f-7d21-4e5c-9727-df5e2711e8cc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rewire_id</th>\n","      <th>text</th>\n","      <th>label_sexist</th>\n","      <th>label_category</th>\n","      <th>label_vector</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>sexism2022_english-7358</td>\n","      <td>Damn, this writing was pretty chaotic</td>\n","      <td>not sexist</td>\n","      <td>none</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>sexism2022_english-2367</td>\n","      <td>Yeah, and apparently a bunch of misogynistic v...</td>\n","      <td>not sexist</td>\n","      <td>none</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>sexism2022_english-3073</td>\n","      <td>How the FUCK is this woman still an MP!!!???</td>\n","      <td>not sexist</td>\n","      <td>none</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>sexism2022_english-14895</td>\n","      <td>Understand. Know you're right. At same time I ...</td>\n","      <td>not sexist</td>\n","      <td>none</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>sexism2022_english-4118</td>\n","      <td>Surprized they didn't stop and rape some women</td>\n","      <td>not sexist</td>\n","      <td>none</td>\n","      <td>none</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4d760d7f-7d21-4e5c-9727-df5e2711e8cc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4d760d7f-7d21-4e5c-9727-df5e2711e8cc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4d760d7f-7d21-4e5c-9727-df5e2711e8cc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b6c3fadd-e92e-4c3b-9dcb-95344b2eeb9b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b6c3fadd-e92e-4c3b-9dcb-95344b2eeb9b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b6c3fadd-e92e-4c3b-9dcb-95344b2eeb9b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 14000,\n  \"fields\": [\n    {\n      \"column\": \"rewire_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14000,\n        \"samples\": [\n          \"sexism2022_english-15907\",\n          \"sexism2022_english-18697\",\n          \"sexism2022_english-15075\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14000,\n        \"samples\": [\n          \"Gynocentrism/feminism go hand in hand but this is an example of cronyism and blackmail it just happens to be perpetrated by a woman. People always forget women have the same capacity for alwfulness as men and feminism reinforces it!\",\n          \"Let her choke on your cock and then hard next her\",\n          \"If you're not banging her brains out, it ain't very much special.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_sexist\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"sexist\",\n          \"not sexist\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2. derogation\",\n          \"4. prejudiced discussions\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_vector\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"4.1 supporting mistreatment of individual women\",\n          \"3.3 backhanded gendered compliments\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dskCvuuXEnv3","executionInfo":{"status":"ok","timestamp":1715270507506,"user_tz":-360,"elapsed":3,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"53b08c48-46fa-4a59-ae9a-8fc2ca0c08f2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['rewire_id', 'text', 'label_sexist', 'label_category', 'label_vector'], dtype='object')"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["data = df[['text','label_category']]\n","data = data.dropna()\n","data.head(1000)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"JcN_1_f9Eq8u","executionInfo":{"status":"ok","timestamp":1715270513136,"user_tz":-360,"elapsed":726,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"06539c14-203f-40a2-9c5b-717ebebf4b8f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                  text label_category\n","0                Damn, this writing was pretty chaotic           none\n","1    Yeah, and apparently a bunch of misogynistic v...           none\n","2         How the FUCK is this woman still an MP!!!???           none\n","3    Understand. Know you're right. At same time I ...           none\n","4       Surprized they didn't stop and rape some women           none\n","..                                                 ...            ...\n","995  If she offered to pay for her own food, I dont...           none\n","996  The chick who played apple the Android is pret...           none\n","997  Texas: Muslim migrant couple indicted for ensl...           none\n","998  I only joined this website recently, and I alr...           none\n","999  Thanks man, I know I’m a catch and I’m good lo...   3. animosity\n","\n","[1000 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-0531b2a0-77f7-4dee-bf70-79a6afdaa390\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label_category</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Damn, this writing was pretty chaotic</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Yeah, and apparently a bunch of misogynistic v...</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>How the FUCK is this woman still an MP!!!???</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Understand. Know you're right. At same time I ...</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Surprized they didn't stop and rape some women</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>995</th>\n","      <td>If she offered to pay for her own food, I dont...</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>996</th>\n","      <td>The chick who played apple the Android is pret...</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>997</th>\n","      <td>Texas: Muslim migrant couple indicted for ensl...</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>998</th>\n","      <td>I only joined this website recently, and I alr...</td>\n","      <td>none</td>\n","    </tr>\n","    <tr>\n","      <th>999</th>\n","      <td>Thanks man, I know I’m a catch and I’m good lo...</td>\n","      <td>3. animosity</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1000 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0531b2a0-77f7-4dee-bf70-79a6afdaa390')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0531b2a0-77f7-4dee-bf70-79a6afdaa390 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0531b2a0-77f7-4dee-bf70-79a6afdaa390');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-48f1cedb-8df7-49a9-b1db-ec908eee9751\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-48f1cedb-8df7-49a9-b1db-ec908eee9751')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-48f1cedb-8df7-49a9-b1db-ec908eee9751 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 14000,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14000,\n        \"samples\": [\n          \"Gynocentrism/feminism go hand in hand but this is an example of cronyism and blackmail it just happens to be perpetrated by a woman. People always forget women have the same capacity for alwfulness as men and feminism reinforces it!\",\n          \"Let her choke on your cock and then hard next her\",\n          \"If you're not banging her brains out, it ain't very much special.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label_category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2. derogation\",\n          \"4. prejudiced discussions\",\n          \"1. threats, plans to harm and incitement\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"akWtR49IE6Qf","executionInfo":{"status":"ok","timestamp":1715270517497,"user_tz":-360,"elapsed":433,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"2f2e39e0-d10d-453f-fee9-78574ceb53f0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(14000, 2)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["data.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_xv6csp2E9Ll","executionInfo":{"status":"ok","timestamp":1715270521095,"user_tz":-360,"elapsed":4,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"8992b0ee-7128-4d56-ccfa-74a7ff94ae64"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["text              object\n","label_category    object\n","dtype: object"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["data.label_category.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dPx_792QFA9Y","executionInfo":{"status":"ok","timestamp":1715270525023,"user_tz":-360,"elapsed":2,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"525846dc-3009-4aa2-eb46-e4d49d6f04fa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label_category\n","none                                        10602\n","2. derogation                                1590\n","3. animosity                                 1165\n","4. prejudiced discussions                     333\n","1. threats, plans to harm and incitement      310\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["def example_complain(index):\n","    example = data[data.index == index][['text', 'label_category']].values[0]\n","    if len(example) > 0:\n","        print(example[0])\n","        print()\n","        print('Category:', example[1])"],"metadata":{"id":"6B18T5UaFaYT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["example_complain(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WAqo3zRdFgkZ","executionInfo":{"status":"ok","timestamp":1715270533883,"user_tz":-360,"elapsed":3,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"2467eef9-061a-4140-9c16-32d845a6a6af"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\"Oh shit, she clearly knows more about Big 5 traits than I do! Deflect! Use the magic RP words!\"\n","\n","Category: none\n"]}]},{"cell_type":"code","source":["filtered_df = df[df['label_category'] != 'none']\n","\n","# Print the filtered DataFrame\n","filtered_df['label_category'].value_counts(normalize=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0SEkULtNFy06","executionInfo":{"status":"ok","timestamp":1715270538074,"user_tz":-360,"elapsed":3,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"2d153abb-fdbe-446d-a2fb-a64d020d31d0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label_category\n","2. derogation                               0.467922\n","3. animosity                                0.342849\n","4. prejudiced discussions                   0.097999\n","1. threats, plans to harm and incitement    0.091230\n","Name: proportion, dtype: float64"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["filtered_df.label_category.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ATHTMlCsGRi7","executionInfo":{"status":"ok","timestamp":1715270541871,"user_tz":-360,"elapsed":3,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"184aeedd-5941-4b60-f4c1-83db6b962e02"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label_category\n","2. derogation                               1590\n","3. animosity                                1165\n","4. prejudiced discussions                    333\n","1. threats, plans to harm and incitement     310\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# The maximum number of words to be used. (most frequent)\n","MAX_NB_WORDS = 50000\n","# Max number of words in each complaint.\n","MAX_SEQUENCE_LENGTH = 250\n","# This is fixed.\n","EMBEDDING_DIM = 100\n","\n","tokenizer = Tokenizer(num_words=MAX_NB_WORDS, filters='!\"#$%&()*+,-./:;<=>?@[\\]^_`{|}~', lower=True)\n","tokenizer.fit_on_texts(filtered_df['text'].values)\n","word_index = tokenizer.word_index\n","print('Found %s unique tokens.' % len(word_index))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oU-k795_GafV","executionInfo":{"status":"ok","timestamp":1715270547847,"user_tz":-360,"elapsed":3,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"adf7bf8f-e301-4524-f4bc-30796927fc9b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 9540 unique tokens.\n"]}]},{"cell_type":"code","source":["X = tokenizer.texts_to_sequences(filtered_df['text'].values)\n","X = pad_sequences(X, maxlen=MAX_SEQUENCE_LENGTH)\n","print('Shape of data tensor:', X.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9w-Klz9GGgYv","executionInfo":{"status":"ok","timestamp":1715270558280,"user_tz":-360,"elapsed":513,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"e9f9fe32-3655-4e2d-88f4-e66e3806ef77"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of data tensor: (3398, 250)\n"]}]},{"cell_type":"code","source":["Y = pd.get_dummies(filtered_df['label_category']).values\n","print('Shape of label tensor:', Y.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lHZuBKVOKQ0Q","executionInfo":{"status":"ok","timestamp":1715270564013,"user_tz":-360,"elapsed":465,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"fb1c2b82-979b-4519-e027-0b7acf5234ba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of label tensor: (3398, 4)\n"]}]},{"cell_type":"code","source":["X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.10, random_state = 42)\n","print(X_train.shape,Y_train.shape)\n","print(X_test.shape,Y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g-wNNOEvKapP","executionInfo":{"status":"ok","timestamp":1715270568402,"user_tz":-360,"elapsed":3,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"32e3e777-9a05-4c2b-da4f-eefd7490a3f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(3058, 250) (3058, 4)\n","(340, 250) (340, 4)\n"]}]},{"cell_type":"code","source":["model = Sequential()\n","model.add(Embedding(MAX_NB_WORDS, EMBEDDING_DIM, input_length=X.shape[1]))\n","model.add(SpatialDropout1D(0.2))\n","model.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\n","model.add(Dense(4, activation='softmax'))\n","model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","print(model.summary())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-I2E_Kz7Ku05","executionInfo":{"status":"ok","timestamp":1715270574797,"user_tz":-360,"elapsed":2185,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"2719ff5f-73cd-4813-e9d0-c0f4c4232b16"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding (Embedding)       (None, 250, 100)          5000000   \n","                                                                 \n"," spatial_dropout1d (Spatial  (None, 250, 100)          0         \n"," Dropout1D)                                                      \n","                                                                 \n"," lstm (LSTM)                 (None, 100)               80400     \n","                                                                 \n"," dense (Dense)               (None, 4)                 404       \n","                                                                 \n","=================================================================\n","Total params: 5080804 (19.38 MB)\n","Trainable params: 5080804 (19.38 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n","None\n"]}]},{"cell_type":"code","source":["epochs = 5\n","batch_size = 64\n","\n","history = model.fit(X_train, Y_train, epochs=epochs, batch_size=batch_size,validation_split=0.1,callbacks=[EarlyStopping(monitor='val_loss', patience=3, min_delta=0.0001)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4Gpkb_X4K8LA","executionInfo":{"status":"ok","timestamp":1715270786295,"user_tz":-360,"elapsed":204969,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"3e7020ba-a496-4602-846a-b6406462fe44"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","43/43 [==============================] - 38s 821ms/step - loss: 1.2150 - accuracy: 0.4437 - val_loss: 1.2085 - val_accuracy: 0.4183\n","Epoch 2/5\n","43/43 [==============================] - 33s 762ms/step - loss: 1.1118 - accuracy: 0.4746 - val_loss: 1.1501 - val_accuracy: 0.4314\n","Epoch 3/5\n","43/43 [==============================] - 42s 974ms/step - loss: 0.9103 - accuracy: 0.6177 - val_loss: 1.1478 - val_accuracy: 0.4477\n","Epoch 4/5\n","43/43 [==============================] - 34s 784ms/step - loss: 0.6332 - accuracy: 0.7722 - val_loss: 1.1574 - val_accuracy: 0.4837\n","Epoch 5/5\n","43/43 [==============================] - 36s 837ms/step - loss: 0.3943 - accuracy: 0.8692 - val_loss: 1.3000 - val_accuracy: 0.4771\n"]}]},{"cell_type":"code","source":["\n","\n","accr = model.evaluate(X_test,Y_test)\n","print('Test set\\n  Loss: {:0.3f}\\n  Accuracy: {:0.3f}'.format(accr[0],accr[1]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r3Y8VEMiMNT7","executionInfo":{"status":"ok","timestamp":1715270792266,"user_tz":-360,"elapsed":787,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"f2405bb6-e839-4103-ed04-14b2e00d6870"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["11/11 [==============================] - 1s 73ms/step - loss: 1.2234 - accuracy: 0.4912\n","Test set\n","  Loss: 1.223\n","  Accuracy: 0.491\n"]}]},{"cell_type":"code","source":["plt.title('Loss')\n","plt.plot(history.history['loss'], label='train')\n","plt.plot(history.history['val_loss'], label='test')\n","plt.legend()\n","plt.show();"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"EW2LgQrcMg2h","executionInfo":{"status":"ok","timestamp":1715270801370,"user_tz":-360,"elapsed":625,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"caca6d6c-0b83-47d4-e45b-da34dd7bfdf1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAiMAAAGzCAYAAAD9pBdvAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABQAElEQVR4nO3dd3hUZfrG8e/MpJNGSwFC7yWhxwAiLiCK8BMsICoCCgKCgqy6smtdd2F3rYgIKCp2VKQoIogoIBB6Cb2XAKmUVFLn/P4YCEQDJJDkZJL7c11zIe+cM/O8HMPcvOecZyyGYRiIiIiImMRqdgEiIiJSsSmMiIiIiKkURkRERMRUCiMiIiJiKoURERERMZXCiIiIiJhKYURERERMpTAiIiIiplIYEREREVMpjIiIiIipFEZE5IbMnj0bi8XCpk2bzC5FRJyUwoiIiIiYSmFERERETKUwIiIlbuvWrdxxxx34+vri7e1N9+7dWbduXb5tsrOzeeWVV2jUqBEeHh5UrVqVLl26sGzZsrxtYmNjGTZsGLVq1cLd3Z3g4GDuuusujh49WsozEpHi5GJ2ASJSvu3atYubb74ZX19fnn32WVxdXZk5cybdunVj5cqVhIeHA/Dyyy8zefJkhg8fTseOHUlOTmbTpk1s2bKFnj17AnDPPfewa9cunnjiCerWrUt8fDzLli3j+PHj1K1b18RZisiNsBiGYZhdhIg4r9mzZzNs2DA2btxI+/bt//R8//79Wbx4MXv27KF+/foAxMTE0KRJE9q0acPKlSsBaN26NbVq1WLRokUFvs+5c+eoXLkyr732Gk8//XTJTUhESp1O04hIicnNzeXnn3+mX79+eUEEIDg4mAceeIDVq1eTnJwMgL+/P7t27eLAgQMFvpanpydubm6sWLGCs2fPlkr9IlI6FEZEpMQkJCSQnp5OkyZN/vRcs2bNsNvtREdHA/DPf/6Tc+fO0bhxY1q1asUzzzxDVFRU3vbu7u7897//5aeffiIwMJCuXbvyv//9j9jY2FKbj4iUDIURESkTunbtyqFDh/joo49o2bIls2bNom3btsyaNStvm/Hjx7N//34mT56Mh4cHL7zwAs2aNWPr1q0mVi4iN0phRERKTPXq1fHy8mLfvn1/em7v3r1YrVZCQkLyxqpUqcKwYcP46quviI6OJjQ0lJdffjnffg0aNOCvf/0rP//8Mzt37iQrK4s33nijpKciIiVIYURESozNZuO2225j4cKF+W6/jYuL48svv6RLly74+voCcPr06Xz7ent707BhQzIzMwFIT08nIyMj3zYNGjTAx8cnbxsRcU66tVdEisVHH33EkiVL/jT+8ssvs2zZMrp06cLjjz+Oi4sLM2fOJDMzk//973952zVv3pxu3brRrl07qlSpwqZNm5g7dy5jx44FYP/+/XTv3p0BAwbQvHlzXFxcmD9/PnFxcdx///2lNk8RKX66tVdEbsjFW3uvJDo6moSEBCZOnMiaNWuw2+2Eh4fz73//m4iIiLzt/v3vf/P999+zf/9+MjMzqVOnDoMHD+aZZ57B1dWV06dP89JLL7F8+XKio6NxcXGhadOm/PWvf+W+++4rjamKSAlRGBERERFT6ZoRERERMZXCiIiIiJhKYURERERMpTAiIiIiplIYEREREVMpjIiIiIipnKLpmd1u59SpU/j4+GCxWMwuR0RERArBMAxSUlKoUaMGVuuV1z+cIoycOnUq3/dXiIiIiPOIjo6mVq1aV3zeKcKIj48P4JjMxe+xEBERkbItOTmZkJCQvM/xK3GKMHLx1Iyvr6/CiIiIiJO51iUWuoBVRERETKUwIiIiIqZSGBERERFTKYyIiIiIqRRGRERExFQKIyIiImIqhRERERExlcKIiIiImEphREREREylMCIiIiKmUhgRERERUymMiIiIiKkURkRERCqq3ByI+ga+GgT2XNPKcIpv7RUREZFilJUO276Ate/AueOOsd0LoOU9ppSjMCIiIlJRnD8LG2fBuhmQnugYq1QdbhoNDbqbVpbCiIiISHmXHAPrpsGmjyEr1THmXwc6PwmtHwRXT1PLUxgREREpr04fgjVTYPtXkJvlGAtoAV2eghb9wVY2YkDZqEJERESKz6mtsPpt2L0QMBxjtTs5QkijnmCxmFndnyiMiIiIlAeGAUdWweq34PBvl8Yb3wFdxkPtm0wr7VoURkRERJyZ3Q77fnSEkJObHWMWG7S6FzqPh8DmppZXGAojIiIizignC3Z84zgdc/qAY8zFA9o+DBFjoXIdU8srCoURERERZ5KZCls+gbXvQsopx5iHH3R8DDqOBO/q5tZ3HRRGREREnEHaadgwE9bPhIxzjjGfYIgYA+2GgruPmdXdEIURERGRsuxcNEROc6yG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\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.title('Accuracy')\n","plt.plot(history.history['accuracy'], label='train')\n","plt.plot(history.history['val_accuracy'], label='test')\n","plt.legend()\n","plt.show();"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"mLNZ07zrMjbV","executionInfo":{"status":"ok","timestamp":1715270807793,"user_tz":-360,"elapsed":617,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"5a353133-90ff-4051-efb8-569c0dfec241"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"310mxnb0NGCm"},"execution_count":null,"outputs":[]}]}