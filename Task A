{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"OHfwcXU2WUX1"},"outputs":[],"source":["# Load, explore and plot data\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n","%matplotlib inline\n","# Train test split\n","from sklearn.model_selection import train_test_split\n","# Text pre-processing\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.callbacks import EarlyStopping\n","# Modeling\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import LSTM, GRU, Dense, Embedding, Dropout, GlobalAveragePooling1D, Flatten, SpatialDropout1D, Bidirectional\n","from keras.layers import Embedding, SpatialDropout1D, LSTM, Dropout, Dense"]},{"cell_type":"markdown","source":["Loading Data Set\n"],"metadata":{"id":"ulZyKZwXa0dP"}},{"cell_type":"code","source":["df = pd.read_csv('/content/train_all_tasks.csv')\n","\n","# Please make to run this file on google collab. once Opened the file go to \"Files\" on the left, select \"Upload to Session Storage\"\n","# Then upload the \"train_all_tasks.csv\" file. Finally select \"Copy Path\" and then paste it. Now you're all set!!\n","df = df.drop([\"rewire_id\",\"label_category\", \"label_vector\"], axis=1)\n","df.rename(columns={'label_sexist':'label', 'text':'message'}, inplace=True)\n","\n","df.head(3)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"PT0VPiaia2UV","executionInfo":{"status":"ok","timestamp":1715269335297,"user_tz":-360,"elapsed":503,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"ad6de920-4bd5-4c10-e7e7-b1eea33c6e4d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                             message       label\n","0              Damn, this writing was pretty chaotic  not sexist\n","1  Yeah, and apparently a bunch of misogynistic v...  not sexist\n","2       How the FUCK is this woman still an MP!!!???  not sexist"],"text/html":["\n","  <div id=\"df-a833294a-e5fa-4ebf-b8a0-5ed23a6cb36f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>message</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Damn, this writing was pretty chaotic</td>\n","      <td>not sexist</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Yeah, and apparently a bunch of misogynistic v...</td>\n","      <td>not sexist</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>How the FUCK is this woman still an MP!!!???</td>\n","      <td>not sexist</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a833294a-e5fa-4ebf-b8a0-5ed23a6cb36f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a833294a-e5fa-4ebf-b8a0-5ed23a6cb36f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a833294a-e5fa-4ebf-b8a0-5ed23a6cb36f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c4cca676-f3a7-498f-ab60-6fdfbc9f29d8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c4cca676-f3a7-498f-ab60-6fdfbc9f29d8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c4cca676-f3a7-498f-ab60-6fdfbc9f29d8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 14000,\n  \"fields\": [\n    {\n      \"column\": \"message\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14000,\n        \"samples\": [\n          \"Gynocentrism/feminism go hand in hand but this is an example of cronyism and blackmail it just happens to be perpetrated by a woman. People always forget women have the same capacity for alwfulness as men and feminism reinforces it!\",\n          \"Let her choke on your cock and then hard next her\",\n          \"If you're not banging her brains out, it ain't very much special.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"sexist\",\n          \"not sexist\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"fmw1BNlUd9eX","executionInfo":{"status":"ok","timestamp":1715269341843,"user_tz":-360,"elapsed":637,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"982679b5-58a4-487d-e342-85bf37974880"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                      message       label\n","count                                   14000       14000\n","unique                                  14000           2\n","top     Damn, this writing was pretty chaotic  not sexist\n","freq                                        1       10602"],"text/html":["\n","  <div id=\"df-78668bfc-3911-4970-bc39-71642b8a569c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>message</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>14000</td>\n","      <td>14000</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>14000</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>Damn, this writing was pretty chaotic</td>\n","      <td>not sexist</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>1</td>\n","      <td>10602</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-78668bfc-3911-4970-bc39-71642b8a569c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-78668bfc-3911-4970-bc39-71642b8a569c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-78668bfc-3911-4970-bc39-71642b8a569c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-15da80a8-559c-42f7-b5e3-ecf5c1078576\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-15da80a8-559c-42f7-b5e3-ecf5c1078576')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-15da80a8-559c-42f7-b5e3-ecf5c1078576 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"message\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"14000\",\n          \"Damn, this writing was pretty chaotic\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"10602\",\n          \"14000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["df.groupby('label').describe().T"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"Kkbq7OONg-9M","executionInfo":{"status":"ok","timestamp":1715269347620,"user_tz":-360,"elapsed":508,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"33664e1a-ec08-4629-f656-d66e55f0f083"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label                                      not sexist  \\\n","message count                                   10602   \n","        unique                                  10602   \n","        top     Damn, this writing was pretty chaotic   \n","        freq                                        1   \n","\n","label                                                      sexist  \n","message count                                                3398  \n","        unique                                               3398  \n","        top     just the inside of your wallet: cash, bank car...  \n","        freq                                                    1  "],"text/html":["\n","  <div id=\"df-cf6261e2-4caf-41a9-8aa2-5e9de42f34d9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>not sexist</th>\n","      <th>sexist</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"4\" valign=\"top\">message</th>\n","      <th>count</th>\n","      <td>10602</td>\n","      <td>3398</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>10602</td>\n","      <td>3398</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>Damn, this writing was pretty chaotic</td>\n","      <td>just the inside of your wallet: cash, bank car...</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf6261e2-4caf-41a9-8aa2-5e9de42f34d9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cf6261e2-4caf-41a9-8aa2-5e9de42f34d9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cf6261e2-4caf-41a9-8aa2-5e9de42f34d9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c8a2297c-de10-41d6-a402-44988edee990\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c8a2297c-de10-41d6-a402-44988edee990')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c8a2297c-de10-41d6-a402-44988edee990 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"not sexist\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"10602\",\n          \"Damn, this writing was pretty chaotic\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sexist\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"3398\",\n          \"just the inside of your wallet: cash, bank cards, credit cards, debit cards. That is the inside that matters to femoids.\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["plt.figure(figsize=(8, 6))\n","sns.countplot(x='label', data=df, orient='v', palette={'not sexist': 'blue', 'sexist': 'orange'})\n","# sns.countplot(df.label, orient ='v', pallette = {'not sexist': 'blue', 'spam': 'orange'})\n","plt.title('The distribution of ham and spam messages')\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":673},"id":"_I9VltEHeebW","executionInfo":{"status":"ok","timestamp":1715269361797,"user_tz":-360,"elapsed":1594,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"b20d20ee-09c7-4b86-e367-688c989bd9de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-5-3addc3d2b8be>:2: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.countplot(x='label', data=df, orient='v', palette={'not sexist': 'blue', 'sexist': 'orange'})\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Downsample"],"metadata":{"id":"S9pYnSpqhY4g"}},{"cell_type":"code","source":["# Assuming 'df' is your DataFrame containing both ham and spam messages\n","ham_msg_df = df[df['label'] == 'not sexist']\n","spam_msg_df = df[df['label'] == 'sexist']\n","\n","# Find the size of the smaller class\n","min_class_size = min(len(ham_msg_df), len(spam_msg_df))\n","\n","# Downsample both classes to the size of the smaller class\n","ham_msg_df_downsampled = ham_msg_df.sample(n=min_class_size, random_state=44)\n","spam_msg_df_downsampled = spam_msg_df.sample(n=min_class_size, random_state=44)\n","\n","# Concatenate the downsampled DataFrames to create the balanced dataset\n","balanced_df = pd.concat([ham_msg_df_downsampled, spam_msg_df_downsampled])\n","\n","# Shuffle the balanced dataset\n","balanced_df = balanced_df.sample(frac=1, random_state=44).reset_index(drop=True)\n","\n","# Now 'balanced_df' contains a globally downsampled dataset with balanced classes"],"metadata":{"id":"-fOxJ3SBhUfk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(8, 6))\n","sns.countplot(x='label', data=balanced_df, orient='v', palette={'not sexist': 'blue', 'sexist': 'orange'})\n","# sns.countplot(df.label, orient ='v', pallette = {'not sexist': 'blue', 'spam': 'orange'})\n","plt.title('The distribution of ham and spam messages')\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":673},"id":"SJAmPRzYhrri","executionInfo":{"status":"ok","timestamp":1715269380180,"user_tz":-360,"elapsed":639,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"1f31db97-d4ac-49c3-d28e-5f87e4a0cc24"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-938a38c04207>:2: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.countplot(x='label', data=balanced_df, orient='v', palette={'not sexist': 'blue', 'sexist': 'orange'})\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Get length column for each text\n","balanced_df['text_length'] = balanced_df['message'].apply(len)\n","\n","balanced_df['msg_type'] = balanced_df['label'].map({'not sexist':0, 'sexist':1})\n","msg_label = balanced_df['msg_type'].values\n","balanced_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"7R9lCyXikBez","executionInfo":{"status":"ok","timestamp":1715269401765,"user_tz":-360,"elapsed":5,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"c2290a50-baca-49a2-b1c9-3081d0050493"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                             message       label  text_length  \\\n","0  That's not a woman. That's a black sow in a gu...      sexist           81   \n","1  This is pure gold and wholesome at the sametim...  not sexist          171   \n","2  Um, no idea. I just told my gf I cheated on he...  not sexist          152   \n","3  Ask a woman to do that and she’ll give you a d...      sexist          100   \n","4  Should be taken from him and given to a real w...      sexist           75   \n","\n","   msg_type  \n","0         1  \n","1         0  \n","2         0  \n","3         1  \n","4         1  "],"text/html":["\n","  <div id=\"df-5cd438c0-dcb0-4937-9db1-1d2cde9091cc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>message</th>\n","      <th>label</th>\n","      <th>text_length</th>\n","      <th>msg_type</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>That's not a woman. That's a black sow in a gu...</td>\n","      <td>sexist</td>\n","      <td>81</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>This is pure gold and wholesome at the sametim...</td>\n","      <td>not sexist</td>\n","      <td>171</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Um, no idea. I just told my gf I cheated on he...</td>\n","      <td>not sexist</td>\n","      <td>152</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Ask a woman to do that and she’ll give you a d...</td>\n","      <td>sexist</td>\n","      <td>100</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Should be taken from him and given to a real w...</td>\n","      <td>sexist</td>\n","      <td>75</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5cd438c0-dcb0-4937-9db1-1d2cde9091cc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5cd438c0-dcb0-4937-9db1-1d2cde9091cc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5cd438c0-dcb0-4937-9db1-1d2cde9091cc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-83a0ea0b-c410-44a6-8f76-b1277f484ba9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-83a0ea0b-c410-44a6-8f76-b1277f484ba9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-83a0ea0b-c410-44a6-8f76-b1277f484ba9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"balanced_df","summary":"{\n  \"name\": \"balanced_df\",\n  \"rows\": 6796,\n  \"fields\": [\n    {\n      \"column\": \"message\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6796,\n        \"samples\": [\n          \"And if we said \\u2018women are trash\\u2019 it\\u2019s a completely different story..\",\n          \"Bitch. You mother, God Bless her, hates what you have become. You were not born a racist, genocidal, SJW bitch.\",\n          \"I guess the ability to throw around an inflated pigskin and gang rape white sorority girls is the true definition of manhood. This is what I imagine of people who use the word 'alpha' or 'beta' as a description of a male - as a rapist.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"not sexist\",\n          \"sexist\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62,\n        \"min\": 4,\n        \"max\": 250,\n        \"num_unique_values\": 245,\n        \"samples\": [\n          134,\n          64\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"msg_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["x_train, x_test, y_train, y_test = train_test_split(balanced_df['message'], msg_label, test_size=0.2, random_state=434)"],"metadata":{"id":"itc2tQN5k8u_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Defining pre-processing parameters\n","max_len = 50\n","trunc_type = 'post'\n","padding_type = 'post'\n","oov_tok = '<OOV>' # out of vocabulary token\n","vocab_size = 500\n","\n","\n","tokenizer = Tokenizer(num_words = vocab_size,\n","                      char_level = False,\n","                      oov_token = oov_tok)\n","tokenizer.fit_on_texts(x_train)"],"metadata":{"id":"s0qUFjbflRU4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Get the word_index\n","word_index = tokenizer.word_index\n","total_words = len(word_index)\n","total_words"],"metadata":{"id":"t26S-JwwlV8O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715269418279,"user_tz":-360,"elapsed":3,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"7c1e27cd-1897-42c1-a67b-2b91f1c9ec3d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["13234"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# For training Data\n","\n","\n","training_sequences = tokenizer.texts_to_sequences(x_train)\n","training_padded = pad_sequences(training_sequences,\n","                                maxlen = max_len,\n","                                padding = padding_type,\n","                                truncating = trunc_type)\n","\n","# For testing Data\n","\n","testing_sequences = tokenizer.texts_to_sequences(x_test)\n","testing_padded = pad_sequences(testing_sequences,\n","                               maxlen = max_len,\n","                               padding = padding_type,\n","                               truncating = trunc_type)"],"metadata":{"id":"p3XxjXS4lo8I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('Shape of training tensor: ', training_padded.shape)\n","print('Shape of testing tensor: ', testing_padded.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W-y_qDfZlrwq","executionInfo":{"status":"ok","timestamp":1715269458775,"user_tz":-360,"elapsed":473,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"6e7b2b21-0708-4fa5-e767-48f5eb8ee012"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of training tensor:  (5436, 50)\n","Shape of testing tensor:  (1360, 50)\n"]}]},{"cell_type":"markdown","source":["Bi-LSTM Defining"],"metadata":{"id":"pSDmX5b2lxA0"}},{"cell_type":"code","source":["# Define parameter\n","n_lstm = 128\n","# n_lstm = 148\n","drop_lstm = 0.2\n","# drop_lstm = 0.6\n","embedding_dim = 16\n","# embedding_dim = 12\n","\n","# Define BD-LSTM Model\n","model2 = Sequential()\n","model2.add(Embedding(vocab_size,\n","                     embedding_dim,\n","                     input_length = max_len))\n","model2.add(Bidirectional(LSTM(n_lstm,\n","                              return_sequences = False)))\n","model2.add(Dropout(drop_lstm))\n","model2.add(Dense(1, activation='sigmoid'))"],"metadata":{"id":"TyA_0Tn1lvsL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model2.summary()"],"metadata":{"id":"07v0w8GamV1s","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715269470181,"user_tz":-360,"elapsed":564,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"395dae1f-14d5-4fe3-ebf1-8bc713bb51ef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding (Embedding)       (None, 50, 16)            8000      \n","                                                                 \n"," bidirectional (Bidirection  (None, 256)               148480    \n"," al)                                                             \n","                                                                 \n"," dropout (Dropout)           (None, 256)               0         \n","                                                                 \n"," dense (Dense)               (None, 1)                 257       \n","                                                                 \n","=================================================================\n","Total params: 156737 (612.25 KB)\n","Trainable params: 156737 (612.25 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["model2.compile(loss = 'binary_crossentropy',\n","               optimizer = 'adam',\n","               metrics=['accuracy'])"],"metadata":{"id":"R4BLs4w9memw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num_epochs = 30\n","# early_stop = EarlyStopping(monitor = 'val_loss',\n","#                            patience = 2)\n","# early_stop = EarlyStopping(monitor='val_loss', min_delta = 0.0001, patience=20, verbose = 1, mode = 'auto', baseline = None,  restore_best_weights=False, start_from_epoch = 0)\n","early_stop = EarlyStopping(monitor='val_loss', patience=2)\n","history2 = model2.fit(training_padded,\n","                     y_train,\n","                     epochs = num_epochs,\n","                     validation_data = (testing_padded, y_test),\n","                     callbacks = [early_stop],\n","                     verbose = 2)"],"metadata":{"id":"8ltt6hWUmm1G","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715272872865,"user_tz":-360,"elapsed":73859,"user":{"displayName":"KAMRAN HASSAN SHOMRAT","userId":"14582049706465914688"}},"outputId":"c24c2ed2-9900-4465-8488-49df0cd271d9"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","170/170 - 23s - loss: 0.3522 - accuracy: 0.8438 - val_loss: 0.7168 - val_accuracy: 0.6860 - 23s/epoch - 133ms/step\n","Epoch 2/30\n","170/170 - 23s - loss: 0.3509 - accuracy: 0.8420 - val_loss: 0.8007 - val_accuracy: 0.6779 - 23s/epoch - 137ms/step\n","Epoch 3/30\n","170/170 - 28s - loss: 0.3386 - accuracy: 0.8532 - val_loss: 0.7885 - val_accuracy: 0.6890 - 28s/epoch - 163ms/step\n"]}]},{"cell_type":"code","source":["model2.evaluate(testing_padded, y_test)"],"metadata":{"id":"v0WAYAmytHPU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715272943746,"user_tz":-360,"elapsed":2543,"user":{"displayName":"KAMRAN HASSAN SHOMRAT","userId":"14582049706465914688"}},"outputId":"d032ad7e-97a1-4958-c896-66bbe60adf0a"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["43/43 [==============================] - 2s 56ms/step - loss: 0.7885 - accuracy: 0.6890\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.7884514927864075, 0.6889705657958984]"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["train_dense_results = model2.evaluate(training_padded, np.asarray(y_train), verbose=2, batch_size=256)\n","valid_dense_results = model2.evaluate(testing_padded, np.asarray(y_test), verbose=2, batch_size=256)\n","print(f'Training accuracy: {train_dense_results[1]*100:0.2f}')\n","print(f'Validity accuracy: {valid_dense_results[1]*100:0.2f}')"],"metadata":{"id":"YkAMqUFitAF_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715272952995,"user_tz":-360,"elapsed":4847,"user":{"displayName":"KAMRAN HASSAN SHOMRAT","userId":"14582049706465914688"}},"outputId":"d2a1c2b9-79e4-4a19-d834-bf4c7c5154a6"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["22/22 - 3s - loss: 0.3190 - accuracy: 0.8631 - 3s/epoch - 151ms/step\n","6/6 - 1s - loss: 0.7885 - accuracy: 0.6890 - 860ms/epoch - 143ms/step\n","Training accuracy: 86.31\n","Validity accuracy: 68.90\n"]}]},{"cell_type":"code","source":["# Extract training and validation accuracy values from the history object\n","train_accuracy = history2.history['accuracy']\n","val_accuracy = history2.history['val_accuracy']\n","\n","# Plotting\n","epochs = range(1, len(train_accuracy) + 1)\n","plt.plot(epochs, train_accuracy, 'b', label='Training accuracy')\n","plt.plot(epochs, val_accuracy, 'r', label='Validation accuracy')\n","plt.title('Training and Validation Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"8c1oYoo6tY3x","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1715270329059,"user_tz":-360,"elapsed":6,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"80aab2c1-c839-4463-91e4-dd37b6723013"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Extract training and validation loss values from the history object\n","train_loss = history2.history['loss']\n","val_loss = history2.history['val_loss']\n","\n","# Plotting\n","epochs = range(1, len(train_loss) + 1)\n","plt.plot(epochs, train_loss, 'b', label='Training loss')\n","plt.plot(epochs, val_loss, 'r', label='Validation loss')\n","plt.title('Training and Validation Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"OmiohAaLs2BT","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1715270336206,"user_tz":-360,"elapsed":1178,"user":{"displayName":"TARANNUM AHMED NOWSHIN","userId":"13635940570438615345"}},"outputId":"b49d2bd6-cd67-4993-8914-14220bcaa7b4"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def predict_message(model, tokenizer, max_len, padding_type, trunc_type, message):\n","    new_seq = tokenizer.texts_to_sequences([message])\n","    padded = pad_sequences(new_seq, maxlen=max_len, padding=padding_type, truncating=trunc_type)\n","    prediction = model.predict(padded)\n","    # Assuming that 1 indicates \"spam\" and 0 indicates \"not spam\"\n","    if prediction > 0.5:\n","        return \"----------SEXIST--------\"\n","    else:\n","        return \"--------------NOT SEXIST---------------\"\n","\n","message = input(\"Enter a message: \")\n","prediction = predict_message(model2, tokenizer, max_len, padding_type, trunc_type, message)\n","print(\"Prediction:\", prediction)"],"metadata":{"id":"hrfwKyGrtXlf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715274175114,"user_tz":-360,"elapsed":12379,"user":{"displayName":"KAMRAN HASSAN SHOMRAT","userId":"14582049706465914688"}},"outputId":"6a134c08-4850-4a25-cf94-8ff6e45bb0c3"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a message: Nowshin is Stupid \n","1/1 [==============================] - 1s 1s/step\n","Prediction: ----------SEXIST--------\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"wuOub8vws-4a"},"execution_count":null,"outputs":[]}]}